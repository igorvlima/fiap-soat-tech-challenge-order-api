plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.jetbrains.kotlin.jvm'
    id "org.sonarqube" version "6.2.0.5505"
    id "jacoco"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0")
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

sonar {
    properties {
        property "sonar.projectKey", "igorvlima_fiap-soat-tech-challenge-order-api"
        property "sonar.organization", "igorvlima"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        properties {
            property "sonar.exclusions",
                    "**/com/example/fiapsoattechchallengeorderapi/adapters/outbound/entities/**," +
                            "**/com/example/fiapsoattechchallengeorderapi/adapters/outbound/client/customer/response/**," +
                            "**/com/example/fiapsoattechchallengeorderapi/adapters/outbound/client/product/response/**"
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

def excludedDirs = [
        'com/example/fiapsoattechchallengeorderapi/adapters/outbound/entities/**',
        'com/example/fiapsoattechchallengeorderapi/adapters/outbound/client/customer/response/**',
        'com/example/fiapsoattechchallengeorderapi/adapters/outbound/client/product/response/**'
]

def mainClasses = fileTree(
        dir: "${buildDir}/classes/java/main",
        excludes: excludedDirs
)

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }

    classDirectories.setFrom(mainClasses)
}